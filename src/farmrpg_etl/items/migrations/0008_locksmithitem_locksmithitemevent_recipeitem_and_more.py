# Generated by Django 4.2 on 2023-05-20 06:02

from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ("pghistory", "0005_events_middlewareevents"),
        ("items", "0007_wishingwellitem_wishingwellitemevent_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="LocksmithItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity_min", models.IntegerField()),
                ("quantity_max", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="LocksmithItemEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("quantity_min", models.IntegerField()),
                ("quantity_max", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RecipeItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="RecipeItemEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("quantity", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="item",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="item",
            name="snapshot_update",
        ),
        migrations.AddField(
            model_name="item",
            name="locksmith_gold",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="item",
            name="locksmith_grab_bag",
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.AddField(
            model_name="itemevent",
            name="locksmith_gold",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="itemevent",
            name="locksmith_grab_bag",
            field=models.BooleanField(default=False, null=True),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="item",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "items_itemevent" ("base_yield_minutes", "buy_price", "can_buy", "can_craft", "can_mail", "can_master", "can_sell", "crafting_level", "created_at", "description", "id", "image", "locksmith_gold", "locksmith_grab_bag", "min_mailable_level", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reg_weight", "runecube_weight", "sell_price", "type", "xp") VALUES (NEW."base_yield_minutes", NEW."buy_price", NEW."can_buy", NEW."can_craft", NEW."can_mail", NEW."can_master", NEW."can_sell", NEW."crafting_level", NEW."created_at", NEW."description", NEW."id", NEW."image", NEW."locksmith_gold", NEW."locksmith_grab_bag", NEW."min_mailable_level", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."reg_weight", NEW."runecube_weight", NEW."sell_price", NEW."type", NEW."xp"); RETURN NULL;',
                    hash="1bc48936d43f2f2f2a5047fee7cb332f4c75e5d8",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_9fd5a",
                    table="items_item",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="item",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."name" IS DISTINCT FROM (NEW."name") OR OLD."image" IS DISTINCT FROM (NEW."image") OR OLD."type" IS DISTINCT FROM (NEW."type") OR OLD."xp" IS DISTINCT FROM (NEW."xp") OR OLD."can_buy" IS DISTINCT FROM (NEW."can_buy") OR OLD."can_sell" IS DISTINCT FROM (NEW."can_sell") OR OLD."can_mail" IS DISTINCT FROM (NEW."can_mail") OR OLD."can_craft" IS DISTINCT FROM (NEW."can_craft") OR OLD."can_master" IS DISTINCT FROM (NEW."can_master") OR OLD."description" IS DISTINCT FROM (NEW."description") OR OLD."buy_price" IS DISTINCT FROM (NEW."buy_price") OR OLD."sell_price" IS DISTINCT FROM (NEW."sell_price") OR OLD."crafting_level" IS DISTINCT FROM (NEW."crafting_level") OR OLD."base_yield_minutes" IS DISTINCT FROM (NEW."base_yield_minutes") OR OLD."min_mailable_level" IS DISTINCT FROM (NEW."min_mailable_level") OR OLD."reg_weight" IS DISTINCT FROM (NEW."reg_weight") OR OLD."runecube_weight" IS DISTINCT FROM (NEW."runecube_weight") OR OLD."locksmith_grab_bag" IS DISTINCT FROM (NEW."locksmith_grab_bag") OR OLD."locksmith_gold" IS DISTINCT FROM (NEW."locksmith_gold") OR OLD."created_at" IS DISTINCT FROM (NEW."created_at"))',
                    func='INSERT INTO "items_itemevent" ("base_yield_minutes", "buy_price", "can_buy", "can_craft", "can_mail", "can_master", "can_sell", "crafting_level", "created_at", "description", "id", "image", "locksmith_gold", "locksmith_grab_bag", "min_mailable_level", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reg_weight", "runecube_weight", "sell_price", "type", "xp") VALUES (NEW."base_yield_minutes", NEW."buy_price", NEW."can_buy", NEW."can_craft", NEW."can_mail", NEW."can_master", NEW."can_sell", NEW."crafting_level", NEW."created_at", NEW."description", NEW."id", NEW."image", NEW."locksmith_gold", NEW."locksmith_grab_bag", NEW."min_mailable_level", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."reg_weight", NEW."runecube_weight", NEW."sell_price", NEW."type", NEW."xp"); RETURN NULL;',
                    hash="c2bd101e943493813d2f4fcd70d7194a16eaa2c5",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_a9aca",
                    table="items_item",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="recipeitemevent",
            name="ingredient_item",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="items.item",
            ),
        ),
        migrations.AddField(
            model_name="recipeitemevent",
            name="item",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="items.item",
            ),
        ),
        migrations.AddField(
            model_name="recipeitemevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="recipeitemevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="event",
                to="items.recipeitem",
            ),
        ),
        migrations.AddField(
            model_name="recipeitem",
            name="ingredient_item",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recipe_ingredient_items",
                to="items.item",
            ),
        ),
        migrations.AddField(
            model_name="recipeitem",
            name="item",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recipe_items",
                to="items.item",
            ),
        ),
        migrations.AddField(
            model_name="locksmithitemevent",
            name="item",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="items.item",
            ),
        ),
        migrations.AddField(
            model_name="locksmithitemevent",
            name="output_item",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="items.item",
            ),
        ),
        migrations.AddField(
            model_name="locksmithitemevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="locksmithitemevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="event",
                to="items.locksmithitem",
            ),
        ),
        migrations.AddField(
            model_name="locksmithitem",
            name="item",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="locksmith_items",
                to="items.item",
            ),
        ),
        migrations.AddField(
            model_name="locksmithitem",
            name="output_item",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="locksmith_output_items",
                to="items.item",
            ),
        ),
        migrations.AddConstraint(
            model_name="recipeitem",
            constraint=models.UniqueConstraint(
                fields=("item", "ingredient_item"), name="item_ingredient_item"
            ),
        ),
        migrations.AddConstraint(
            model_name="locksmithitem",
            constraint=models.UniqueConstraint(
                fields=("item", "output_item"), name="item_output_item"
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="recipeitem",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "items_recipeitemevent" ("created_at", "id", "ingredient_item_id", "item_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "quantity") VALUES (NEW."created_at", NEW."id", NEW."ingredient_item_id", NEW."item_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."quantity"); RETURN NULL;',
                    hash="b7bb44041e09d8242b5b7f7a781d85f3e7b960ce",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_1a314",
                    table="items_recipeitem",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="recipeitem",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."item_id" IS DISTINCT FROM (NEW."item_id") OR OLD."ingredient_item_id" IS DISTINCT FROM (NEW."ingredient_item_id") OR OLD."quantity" IS DISTINCT FROM (NEW."quantity") OR OLD."created_at" IS DISTINCT FROM (NEW."created_at"))',
                    func='INSERT INTO "items_recipeitemevent" ("created_at", "id", "ingredient_item_id", "item_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "quantity") VALUES (NEW."created_at", NEW."id", NEW."ingredient_item_id", NEW."item_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."quantity"); RETURN NULL;',
                    hash="4b18d997a59159de3679bead2cb7849a8a824429",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_bece2",
                    table="items_recipeitem",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="locksmithitem",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "items_locksmithitemevent" ("created_at", "id", "item_id", "output_item_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "quantity_max", "quantity_min") VALUES (NEW."created_at", NEW."id", NEW."item_id", NEW."output_item_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."quantity_max", NEW."quantity_min"); RETURN NULL;',
                    hash="7edea145f8de072f4f4f0d78b9faf60532defa69",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_c11eb",
                    table="items_locksmithitem",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="locksmithitem",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."item_id" IS DISTINCT FROM (NEW."item_id") OR OLD."output_item_id" IS DISTINCT FROM (NEW."output_item_id") OR OLD."quantity_min" IS DISTINCT FROM (NEW."quantity_min") OR OLD."quantity_max" IS DISTINCT FROM (NEW."quantity_max") OR OLD."created_at" IS DISTINCT FROM (NEW."created_at"))',
                    func='INSERT INTO "items_locksmithitemevent" ("created_at", "id", "item_id", "output_item_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "quantity_max", "quantity_min") VALUES (NEW."created_at", NEW."id", NEW."item_id", NEW."output_item_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."quantity_max", NEW."quantity_min"); RETURN NULL;',
                    hash="1e29f71b5c73b0235e0fbbe0f2aff021ca265c89",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_b8dd0",
                    table="items_locksmithitem",
                    when="AFTER",
                ),
            ),
        ),
    ]
