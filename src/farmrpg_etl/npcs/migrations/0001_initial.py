# Generated by Django 4.2 on 2023-05-12 06:23

from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("items", "0006_remove_item_snapshot_insert_and_more"),
        ("pghistory", "0005_events_middlewareevents"),
    ]

    operations = [
        migrations.CreateModel(
            name="NPC",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("image", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "NPC",
                "verbose_name_plural": "NPCs",
            },
        ),
        migrations.CreateModel(
            name="NPCItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "relationship",
                    models.CharField(
                        choices=[
                            ("loves", "Loves"),
                            ("likes", "likes"),
                            ("hates", "Hates"),
                        ],
                        max_length=32,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="npc_items",
                        to="items.item",
                    ),
                ),
                (
                    "npc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="npc_items",
                        to="npcs.npc",
                    ),
                ),
            ],
            options={
                "verbose_name": "NPC item",
                "verbose_name_plural": "NPC items",
            },
        ),
        migrations.CreateModel(
            name="NPCReward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.IntegerField()),
                ("order", models.IntegerField()),
                ("quantity", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="npc_rewards",
                        to="items.item",
                    ),
                ),
                (
                    "npc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="npc_rewards",
                        to="npcs.npc",
                    ),
                ),
            ],
            options={
                "verbose_name": "NPC reward",
                "verbose_name_plural": "NPC rewards",
            },
        ),
        migrations.CreateModel(
            name="NPCRewardEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("level", models.IntegerField()),
                ("order", models.IntegerField()),
                ("quantity", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "item",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="items.item",
                    ),
                ),
                (
                    "npc",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="npcs.npc",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="event",
                        to="npcs.npcreward",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NPCItemEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                (
                    "relationship",
                    models.CharField(
                        choices=[
                            ("loves", "Loves"),
                            ("likes", "likes"),
                            ("hates", "Hates"),
                        ],
                        max_length=32,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "item",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="items.item",
                    ),
                ),
                (
                    "npc",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="npcs.npc",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="event",
                        to="npcs.npcitem",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NPCEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("name", models.CharField(max_length=255)),
                ("image", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="event",
                        to="npcs.npc",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="npc",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "npcs_npcevent" ("created_at", "id", "image", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."created_at", NEW."id", NEW."image", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;',
                    hash="a0e22e6a84b8f3cc92ae0a5c464324e87ad82e2b",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_d1bdb",
                    table="npcs_npc",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="npc",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."name" IS DISTINCT FROM (NEW."name") OR OLD."image" IS DISTINCT FROM (NEW."image") OR OLD."created_at" IS DISTINCT FROM (NEW."created_at"))',
                    func='INSERT INTO "npcs_npcevent" ("created_at", "id", "image", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."created_at", NEW."id", NEW."image", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;',
                    hash="f603b72b1f10d6dfdd589dc2707d2bc8c5e006c3",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_9156b",
                    table="npcs_npc",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="npcreward",
            constraint=models.UniqueConstraint(
                fields=("npc", "level", "order"), name="npc_level_order"
            ),
        ),
        migrations.AddConstraint(
            model_name="npcitem",
            constraint=models.UniqueConstraint(fields=("npc", "item"), name="npc_item"),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="npcreward",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "npcs_npcrewardevent" ("created_at", "id", "item_id", "level", "npc_id", "order", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "quantity") VALUES (NEW."created_at", NEW."id", NEW."item_id", NEW."level", NEW."npc_id", NEW."order", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."quantity"); RETURN NULL;',
                    hash="2827ae94906863738593ace2dd602e90215e032c",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_47a08",
                    table="npcs_npcreward",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="npcreward",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."npc_id" IS DISTINCT FROM (NEW."npc_id") OR OLD."level" IS DISTINCT FROM (NEW."level") OR OLD."order" IS DISTINCT FROM (NEW."order") OR OLD."item_id" IS DISTINCT FROM (NEW."item_id") OR OLD."quantity" IS DISTINCT FROM (NEW."quantity") OR OLD."created_at" IS DISTINCT FROM (NEW."created_at"))',
                    func='INSERT INTO "npcs_npcrewardevent" ("created_at", "id", "item_id", "level", "npc_id", "order", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "quantity") VALUES (NEW."created_at", NEW."id", NEW."item_id", NEW."level", NEW."npc_id", NEW."order", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."quantity"); RETURN NULL;',
                    hash="6479100c64a964b2978f22a0ab2ea553003c0292",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_e1470",
                    table="npcs_npcreward",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="npcitem",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "npcs_npcitemevent" ("created_at", "id", "item_id", "npc_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "relationship") VALUES (NEW."created_at", NEW."id", NEW."item_id", NEW."npc_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."relationship"); RETURN NULL;',
                    hash="48495b720f3622782e65c061c1394f426d7549cb",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_fa74a",
                    table="npcs_npcitem",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="npcitem",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."npc_id" IS DISTINCT FROM (NEW."npc_id") OR OLD."item_id" IS DISTINCT FROM (NEW."item_id") OR OLD."relationship" IS DISTINCT FROM (NEW."relationship") OR OLD."created_at" IS DISTINCT FROM (NEW."created_at"))',
                    func='INSERT INTO "npcs_npcitemevent" ("created_at", "id", "item_id", "npc_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "relationship") VALUES (NEW."created_at", NEW."id", NEW."item_id", NEW."npc_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."relationship"); RETURN NULL;',
                    hash="25ff050a5b331d0c1175d2faf9ff35868dd0f9e3",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_644af",
                    table="npcs_npcitem",
                    when="AFTER",
                ),
            ),
        ),
    ]
